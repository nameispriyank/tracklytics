import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.aspectj:aspectjtools:1.8.10'
    }
}

apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion 26
        consumerProguardFiles 'consumer-proguard-rules.pro'
        versionCode 1
        versionName "2.2.1.1"
    }

    lintOptions {
        textReport true
        textOutput 'stdout'
    }
    buildToolsVersion "28.0.3"
}

dependencies {
    compileOnly "org.aspectj:aspectjrt:1.8.10"

    testImplementation 'junit:junit:4.13'
    testImplementation 'com.google.truth:truth:0.28'
    testImplementation "org.mockito:mockito-core:3.3.3"
}

android.libraryVariants.all { variant ->
    JavaCompile javaCompile
    if (variant.hasProperty('javaCompileProvider')) {
        // Android 3.3.0+
        javaCompile = variant.javaCompileProvider.get()
    } else {
        javaCompile = variant.javaCompile
    }
    javaCompile.doLast {
        def destinationDir = javaCompile.destinationDir.toString()
        def bootClassPath = project.android.bootClasspath.join(File.pathSeparator)
        String[] javaArgs = [
                "-showWeaveInfo",
                "-1.7",
                "-inpath", destinationDir,
                "-aspectpath", javaCompile.classpath.asPath/*javaCompile.classpath.asFileTree.filter {!it.canonicalPath.contains("transforms")}.asPath*/,
                "-d", destinationDir,
                "-classpath", javaCompile.classpath.asPath,
                "-bootclasspath", bootClassPath
        ]

        String[] kotlinArgs = [
                "-showWeaveInfo",
                "-1.8",
                "-inpath", project.buildDir.path + "/tmp/kotlin-classes/" + variant,
                "-aspectpath", javaCompile.classpath.asPath/*javaCompile.classpath.asFileTree.filter {!it.canonicalPath.contains("transforms")}.asPath*/,
                "-d", project.buildDir.path + "/tmp/kotlin-classes/" + variant,
                "-classpath", javaCompile.classpath.asPath,
                "-bootclasspath", bootClassPath
        ]

        MessageHandler handler = new MessageHandler(true)
        new Main().run(javaArgs, handler)
        new Main().run(kotlinArgs, handler)
        println("----------------------------------------------")
        println("---------Tracklytics-runtime Weave------------")
        println("----------------------------------------------")
        println("variant: $variant")
        println("destinationDir: $destinationDir")
        println("classPath: ${javaCompile.classpath.asPath}")
        println("bootClassPath: $bootClassPath")
        println("javaArgs: $javaArgs")
        println("kotlinArgs: $kotlinArgs")
        println("----------------------------------------------")
    }
}